{"version":3,"sources":["component/lazyload.js","App.js","component/functions.js","serviceWorker.js","index.js"],"names":["ImgLazyLoad","react_default","a","createElement","style","width","height","opacity","background","src","className","margin","display","marginTop","alt","Container","data","url","auth","_useState","useState","_useState2","Object","slicedToArray","setData","useEffect","fetch","then","res","json","packages","useFetch","method","headers","Headers","Content-Type","Authorization","termino","setTermino","_useState3","_useState4","result","setResult","_useState5","_useState6","setSelectValue","searchValue","string","regex","RegExp","filter","item","test","city_names","searchTour","dataContainer","Fragment","type","onChange","term","target","value","placeholder","name","val","sort","before","after","price","days_and_nights","sortDays","map","element","lib_default","once","lazyload","debounce","principal_photo","activities","App","App_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd7e6af2.chunk.js","sourcesContent":["import React from 'react'\n\nconst ImgLazyLoad = () => (\n  <div style={{width:\"100%\", height: \"30vh\", opacity:\"0.5\", background:\"#C8C6C8  \"}} >\n    <img src=\"source/turismoi.png\" className=\"card-img-top\" \n    style={{width:\"50%\", margin:\"auto\", display:\"block\",marginTop:\"27%\", opacity:\"0.5\"}} alt=\"logotype\" />\n  </div>\n  );\n\nexport default ImgLazyLoad; ","import React, { useState} from 'react';\nimport LazyLoad from 'react-lazyload';\n\nimport ImgLazyLoad from './component/lazyload';\nimport './App.scss';\nimport { useFetch, sortPrices, sortDays, searchTour } from './component/functions'\n  \n  const Container = () =>  {\n    const myHeaders = new Headers({\n       'Content-Type':'application/json',\n       'Authorization':'Token token=f2b15a0105d45'\n    });\n    const data = useFetch('https://turismoi.pe/api/v1/packages.json', { method: 'GET',headers: myHeaders });\n    \n    const [termino, setTermino] = useState('');\n    const [result, setResult] = useState([]);\n    const [selectValue, setSelectValue] = useState('')\n \n    const searchValue = (string) => {\n        setResult(searchTour(string, data));\n        setTermino(string);\n    }\n    const dataContainer = termino === '' ? data : result;\n\n    const orderValue = (string) => {\n      if(string === 'precio'){\n        setResult(sortPrices(data))\n      } else if(string === 'dias'){\n        setResult(sortDays(data))\n      }\n      setSelectValue(string);\n    }\n\n    return (\n      <>\n        <div className=\"search\" > \n          <form className=\"form\">\n            <div className=\"form-control\">\n              <input className=\"input\" type=\"text\" onChange = {term => searchValue(term.target.value)}\n                placeholder=\"Buscar por región...\" /><i className=\"fas fa-search\"></i>\n           </div>\n          </form>\n        </div>\n        <div className=\"order\">\n          <select name=\"orden\" className=\"custom-select\" onChange = {val => orderValue(val.target.value)} >\n            <option className=\"d-none\" >Orden</option> \n            <option value=\"precio\">Precio</option> \n            <option value=\"dias\">Días</option>\n          </select>\n        </div> \n        <div className=\"cards\">\n          {dataContainer.map(element => (\n          <div className=\"card\" style={{width:\"18rem\"}}>\n            <LazyLoad\n            once\n            placeholder = { \n            <ImgLazyLoad /> }\n            debounce = {300}\n            >\n            <img src = {element.principal_photo} className=\"card-img-top \" alt=\"foto-principal\" />\n            </LazyLoad>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{element.name} - {element.city_names}</h5>\n                  <div className=\"activities\">Actividades:\n                    {element.activities.map(item => (\n                      <span> {item.name},</span>\n                    ))}\n                  </div>\n              </div> \n              <div className=\"footer-container\">\n                <div className=\"price-text\">\n                <small className=\"\">Desde</small>\n                </div>\n                  <div className=\"footer-card\">\n                    <div className=\"day-card\">\n                      <p className=\"day\">{element.days_and_nights}</p>\n                    </div>\n                    <div className=\"price-card\">\n                      <h3 className=\"price\">s/.{element.price}</h3>\n                    </div>\n                  </div>\n              </div>\n          </div> \n          ))} \n        </div>\n      </>\n    )\n  }\n\n  const App = () => (\n    <div>\n      <Container />\n    </div>\n  )\n\n  export default App;\n","import { useState, useEffect } from 'react';\n\n\n  export const useFetch = (url, auth) => {\n    const [data, setData] = useState([]);\n    useEffect( () => {\n      fetch(url, auth)\n      .then(res => res.json())\n      .then(data => setData(data.packages));\n    }, []);\n    return data;\n  };\n\n  export const searchTour = (string, data) => {\n    let regex = new RegExp(string, 'i');\n    let filtered = data.filter(item => regex.test(item.city_names));\n    return filtered;\n  }\n  \n  export const sortPrices = (data) => data.sort((before,after) => before.price > after.price ? 1 : -1);\n\n  export const sortDays = (data) => data.sort((before,after) => before.days_and_nights > after.days_and_nights ? 1 : -1);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}